image: ${REGISTRY}/it/docker:19.03.1

services:
  - name: ${REGISTRY}/it/docker:19.03.1-dind
    alias: docker

variables:
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - compile
  - test
  - publish

### Anchors
.jcsp-install-script: &jcsp-install-script
  # Install csp
  - tar zxf lib/csp-linux-amd64-deb-5.0.11823.tgz -C lib/
  - lib/linux-amd64_deb/install.sh
  # Install jscp
  - mkdir lib/java-csp && tar zxf lib/java-csp-5.0.40621-A.tgz -C lib/java-csp
  - mkdir crypto/lib
  - cp lib/java-csp/AdES-core.jar crypto/lib
  - cp lib/java-csp/ASN1P.jar crypto/lib
  - cp lib/java-csp/asn1rt.jar crypto/lib
  - cp lib/java-csp/CAdES.jar crypto/lib
  - cp lib/java-csp/forms_rt.jar crypto/lib
  - cp lib/java-csp/JCP.jar crypto/lib
  - cp lib/java-csp/JCPControlPane.jar crypto/lib
  - cp lib/java-csp/JCPRequest.jar crypto/lib
  - cp lib/java-csp/JCPRevCheck.jar crypto/lib
  - cp lib/java-csp/JCPRevTools.jar crypto/lib
  - cp lib/java-csp/JCPxml.jar crypto/lib
  - cp lib/java-csp/JCryptoP.jar crypto/lib
  - cp lib/java-csp/JCSP.jar crypto/lib
  - cp lib/java-csp/Rutoken.jar crypto/lib
  - cp lib/java-csp/XAdES.jar crypto/lib
  - cp lib/java-csp/XMLDSigRI.jar crypto/lib
  # Copy keys for tests
  - cp -r src/test/resources/gost_keystore/* /var/opt/cprocsp/keys/root/
  - chmod -R u=rwX,go=-rwx /var/opt/cprocsp/keys/root/
  - ls -al /var/opt/cprocsp/keys/root/
  - 'java -cp crypto/lib/*: ru.CryptoPro.JCSP.JCSPLicense -serial "PF405-60030-00REK-39KYH-LZXTX" -company we -store'
  - /opt/cprocsp/sbin/amd64/cpconfig -ini '\config\parameters' -add long ControlKeyTimeValidity 0

.create-environment: &create-environment
  image: ${REGISTRY}/it/hseeberger/scala-sbt:11.0.6_1.3.10_2.12.10
  tags:
    - wavesenterprise
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    NODE_HOST: docker
    SBT_THREAD_NUMBER: 5
  before_script:
    - *jcsp-install-script
    - cat "$SBT_CREDENTIALS" > /root/.sbt/.credentials

# Sbt cache invalidation fix [https://github.com/sbt/sbt/issues/4168]
.pack-build-products: &pack-build-products
  - find -name target -exec tar -zcf targets.tar.gz -H posix {} +
  - find -name target -exec rm -r {} +
  - find -name managed -exec tar -zcf managed.tar.gz -H posix {} +
  - find -name managed -exec rm -r {} +

.unpack-build-products: &unpack-build-products
  - tar -xf targets.tar.gz
  - tar -xf managed.tar.gz

### Compile jobs
compile:
  <<: *create-environment
  stage: compile
  script:
    - sbt -mem 2048 compileAll
    - *pack-build-products
  artifacts:
    paths:
      - targets.tar.gz
      - managed.tar.gz
    expire_in: 1 day

### Testing jobs
test-core:
  <<: *create-environment
  stage: test
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    NODE_HOST: docker
    SBT_THREAD_NUMBER: 5
  script:
    - *unpack-build-products
    - rm -rf transactions-factory 2>/dev/null || true
    - git submodule sync --recursive
    - git submodule update --init --recursive
    - sbt -mem 2048 test lang/test
  artifacts:
    reports:
      junit:
        - target/test-reports/*.xml
        - lang/jvm/target/test-reports/*.xml

publish-nexus-artifacts:
  <<: *create-environment
  stage: publish
  needs:
    - compile
    - test-core
  script:
    - *unpack-build-products
    - sbt -mem 2048 ";core/publish;testCore/publish;protobufArchives/publish"
  only:
    - /^release-\d+\.\d+$/
    - tags
